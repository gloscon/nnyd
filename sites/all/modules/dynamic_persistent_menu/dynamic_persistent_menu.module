<?php
// $Id: dynamic_persistent_menu.module,v 1.1.4.7 2009/01/09 05:08:38 yrocq Exp $

/**
 * @file
 * Display a dynamic horizontal menu which degrades gracefully if Javascript is not present
 */
/**
 * Implementation of hook_block
 */
function dynamic_persistent_menu_block($op= 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Dynamic persistent menu');
      return $block;
      break;
      
    case 'view':
      $params = explode(':',variable_get('dynamic_persistent_menu_menu_root', 'navigation:0'));
      $block['content'] = theme('dynamic_persistent_menu', $params[0], $params[1], variable_get('dynamic_persistent_menu_sub_menu_timeout', 2000));
      return $block;
      break;
      
      case 'configure':
        $options = menu_parent_options(menu_get_menus(), 0);
        $form['dynamic_persistent_menu_menu_root'] = array(
          '#type' => 'select',
          '#title' => t('Menu root'),
          '#default_value' => variable_get('dynamic_persistent_menu_menu_root', 'navigation:0'),
          '#options' => $options,
          '#description' => t('Choose the menu you wish to display in the block')
        );
        $form['dynamic_persistent_menu_sub_menu_timeout'] = array(
            '#type' => 'textfield',
            '#title' => t('Sub-menu timeout'),
            '#default_value' => variable_get('dynamic_persistent_menu_sub_menu_timeout', 2000),
            '#description' => t('Time before menu hiding when the mouse pointer leaves the parent menu (in milliseconds)')
          );
          
          return $form;
      
      case 'save':
        variable_set('dynamic_persistent_menu_menu_root', $edit['dynamic_persistent_menu_menu_root']);
        variable_set('dynamic_persistent_menu_sub_menu_timeout', (int) $edit['dynamic_persistent_menu_sub_menu_timeout']);
        break;
  }
}

/**
 * Implementation of hook_theme
 */

function dynamic_persistent_menu_theme() {
  return array(
    'dynamic_persistent_menu' => array(
      'arguments' => array(
          'menu' => NULL,
          'parent' => NULL,
          'timeout' => NULL
        ),
    ),
    'dynamic_persistent_menu_menu_item' => array(
        'arguments' => array(
            'link' => NULL,
            'extra_class' => NULL,
            'id' => NULL
          )
      )
  );
}

/**
 * Theme functions
 */

function theme_dynamic_persistent_menu($menu_name, $mlid, $timeout) {
  $item_class = "dynamic-persistent-menu-menu-item";
  $sub_item_class = "dynamic-persistent-menu-sub-menu-item";
  
  // Find menu item in the menu tree

  $menu_tree = menu_tree_all_data($menu_name);
  $menu_link = menu_link_load($mlid);
  
  if ($mlid != 0) {
    for ($i=1; $i<10; $i++) {
      foreach($menu_tree as $menu_item) {
        if ($menu_item["link"]['mlid'] == $mlid) {
          $menu = $menu_item['below'];
          break 2;
        }
        else {
          if ($menu_item["link"]['mlid'] == $menu_link['p'.$i]) {
            $menu_tree = $menu_item['below'];
            break;
          }
        }
      }
    }
  }
  else {
    $menu = $menu_tree;
  }

  // Backup active menu trail and set a new one
  
  $active_menu_name = menu_get_active_menu_name();
  menu_set_active_menu_name($menu_name);

  // Build table of mlid in the active trail
  
  foreach (menu_set_active_trail() as $value) {
    if ($value['mlid']) {
      $trail[] = $value['mlid'];
    }
  }
  
  // Restore active menu trail

  menu_set_active_menu_name($active_menu_name);
  
  // Build the menus
  
  $output = '<ul style="display:inline" class="dynamic-persistent-menu-menu">';

  foreach($menu as $menu_item) {
    $link = $menu_item['link'];
    if ($link['hidden'] == 0) {
      if($link['has_children']) {
        if (is_array($trail) && in_array($link['mlid'], $trail)) {
          $display = 'block';
          $over_menu_default = $link['mlid'];
        }
        else {
          $display = 'none';
        }
      }
      $output .= theme('dynamic_persistent_menu_menu_item', menu_link_load($link['mlid']), 'dynamic-persistent-menu-menu-item', 'dynamic-persistent-menu-menu'.$link['mlid']);
    
      // Submenu
      
      if ($menu_item['link']['has_children']) {
        $submenu_items ='';
        foreach($menu_item['below'] as $submenu_item) {
          $link2 = $submenu_item['link'];
          if ($link2['hidden'] == 0) {
            $submenu_items .= theme('dynamic_persistent_menu_menu_item', menu_link_load($link2['mlid']), 'dynamic-persistent-menu-sub-menu-item', 'dynamic-persistent-menu-sub-menu-item'.$link2['mlid']);;
          }
        }
        if ($submenu_items !='') {
          $submenu .= '<ul class="block dynamic-persistent-menu-sub-menu" id="dynamic-persistent-menu-sub-menu'. $link['mlid'] .'" style="display:'. $display  .'">';
          $submenu .= $submenu_items;
          $submenu .= '</ul>';
        }
      }
    }
  }
  $output .= '</ul>';
  $output .= $submenu;
    drupal_add_js("overMenuDefault = 'dynamic-persistent-menu-sub-menu". $over_menu_default ."';", 'inline');
    drupal_add_js("subMenuTimeout = $timeout;", 'inline');
    drupal_add_js(drupal_get_path('module', 'dynamic_persistent_menu') .'/dynamic_persistent_menu.js');
  
  return $output;
}

 /**
  * Generate the HTML output for a menu item and submenu item.
  *
  * @ingroup themeable
  */
 function theme_dynamic_persistent_menu_menu_item($link, $extra_class = NULL, $id = NULL) {
   if (!empty($extra_class)) {
     $class .= ' '. $extra_class;
   }

   return '<li style="display:inline" class="'. $class .'" id="'.$id.'">'. theme('menu_item_link', $link) ."</li>\n";
 }
 