<?php
// $Id: xmlsitemap_term.module,v 1.11.2.11 2008/11/29 09:31:43 kiam Exp $

/**
 * @file
 * Adds terms to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_term_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']['#value']) && $form_id == $form['type']['#value'] .'_node_form') {
    $node = $form['#node'];
    if (isset($form['type']) && isset($node->nid)) {
      if (isset($node->taxonomy)) {
        $terms = $node->taxonomy;
      }
      else {
        $terms = taxonomy_node_get_terms($node->nid);
      }
      $form['xmlsitemap_term_taxonomy'] = array(
        '#type' => 'value',
        '#value' => $terms,
      );
    }
  }
  else {
    switch ($form_id) {
      case 'taxonomy_form_term':
        $priority = db_result(db_query("SELECT priority_override FROM {xmlsitemap_term} WHERE tid = %d", $form['tid']['#value']));
        $priority = isset($priority) ? $priority : 'NULL';
        if (user_access('override term priority')) {
          $options = xmlsitemap_priority_options('both');
          $default = variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], '0.5');
          $form['xmlsitemap_term_priority'] = array(
            '#type' => 'select',
            '#title' => t('Site map priority'),
            '#default_value' => $priority,
            '#options' => $options,
            '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
          );
          $form['submit']['#weight'] = 1;
          $form['delete']['#weight'] = 1;
        }
        else {
          $form['xmlsitemap_term_priority'] = array('#type' => 'value', '#value' => $priority);
        }
        break;
      case 'taxonomy_form_vocabulary':
        $form['xmlsitemap_term_vocabulary_priority'] = array(
          '#type' => 'select',
          '#title' => t('Site map priority'),
          '#default_value' => variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], 0.5),
          '#options' => xmlsitemap_priority_options('exclude'),
          '#description' => t('This will be the default priority of terms in this vocabulary.'),
        );
        $form['submit']['#weight'] = 1;
        $form['delete']['#weight'] = 1;
        break;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_term_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      if (!empty($node->taxonomy)) {
        $taxonomy_keys = array_keys($node->taxonomy);
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = last_changed, last_changed = %d WHERE tid IN(". db_placeholders($taxonomy_keys, 'int') .")",
          array_merge(array($node->created), $taxonomy_keys)
        );
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      $taxonomy = empty($node->taxonomy) ? array() : array_keys($node->taxonomy);
      $xmlsitemap_term_taxonomy = empty($node->xmlsitemap_term_taxonomy) ? array() : array_keys($node->xmlsitemap_term_taxonomy);
      $terms = array_merge(array_diff($taxonomy, $xmlsitemap_term_taxonomy), array_diff($xmlsitemap_term_taxonomy, $taxonomy));
      if (!empty($terms)) {
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = last_changed, last_changed = %d WHERE tid IN(". db_placeholders($terms, 'varchar') .")",
          array_merge(array($node->changed), $terms)
        );
        xmlsitemap_update_sitemap();
      }
      break;
    case 'delete':
      if (!empty($node->taxonomy)) {
        $taxonomy_keys = array_keys($node->taxonomy);
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = last_changed, last_changed = %d WHERE tid IN(". db_placeholders($taxonomy_keys, 'int') .")",
          array_merge(array(time(), $taxonomy_keys))
        );
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_term_perm() {
  return array('override term priority');
}

/**
 * Implementation of hook_taxonomy().
 */

function xmlsitemap_term_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary') {
    switch ($op) {
      case 'delete':
        variable_del("xmlsitemap_term_vocabulary_priority_$array[vid]");
        xmlsitemap_update_sitemap();
        break;
      case 'insert':
      case 'update':
        if (variable_get("xmlsitemap_term_vocabulary_priority_$array[vid]", 0.5) != $array['xmlsitemap_term_vocabulary_priority']) {
          variable_set("xmlsitemap_term_vocabulary_priority_$array[vid]", $array['xmlsitemap_term_vocabulary_priority']);
          xmlsitemap_update_sitemap();
        }
        break;
    }
  }
  else {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE tid = %d", $array['tid']);
        break;
      case 'insert':
        db_query("INSERT INTO {xmlsitemap_term} (tid, last_changed, priority_override) VALUES (%d, %d, %s)",
          $array['tid'], time(), isset($array['xmlsitemap_term_priority']) ? $array['xmlsitemap_term_priority'] : 'NULL'
        );
        break;
      case 'update':
        if (isset($array['xmlsitemap_term_priority'])) {
          db_query("UPDATE {xmlsitemap_term} SET priority_override = %s WHERE tid = %d",
            $array['xmlsitemap_term_priority'], $array['tid']
          );
        }
        else {
          $priority = db_result(db_query("SELECT priority_override FROM {xmlsitemap_term} WHERE tid = %d", $array['tid']));
          $array['xmlsitemap_term_priority'] = isset($priority) && $priority !== FALSE ? $priority : 'NULL';
        }
        break;
    }
    xmlsitemap_update_sitemap();
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_term_xmlsitemap_links($type = NULL, $excludes = array()) {
  if (!isset($type)) {
    _xmlsitemap_term_links(_xmlsitemap_term_excludes());
    module_invoke_all('xmlsitemap_links', 'term', _xmlsitemap_term_excludes());
  }
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Get array of excluded vocabularies.
 * @return
 *  An array of vocabulary IDs to exclude.
 */
function _xmlsitemap_term_excludes() {
  static $excludes;
  if (!isset($excludes)) {
    $excludes = array();
    $result = db_query("SELECT vid FROM {vocabulary}");
    while ($vocabulary = db_fetch_object($result)) {
      if (variable_get("xmlsitemap_term_vocabulary_priority_$vocabulary->vid", 0.5) < 0) {
        $excludes[] = $vocabulary->vid;
      }
    }
  }
  return $excludes;
}

/**
 * Get the tid of the front page term.
 * @return
 *  The front page term ID, or 0 if front page is not a term.
 */
function _xmlsitemap_term_frontpage() {
  $tid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 3 && $frontpage[0] == 'taxonomy' && $frontpage[1] == 'term' && is_numeric($frontpage[2])) {
    $tid = $frontpage[2];
  }
  elseif (count($frontpage) == 2 && $frontpage[0] == 'forum' && is_numeric($frontpage[1])) {
    $tid = $frontpage[1];
  }
  return $tid;
}

/**
 * Get term links.
 * @param $excludes
 *  An array of node types to exclude.
 * @return
 *  An array of links. Each link is an array containing the XML values for a
 *  site map URL.
 */
function _xmlsitemap_term_links($excludes = array()) {
  if (empty($excludes)) {
    $excludes = array(0);
  }
  $query_args = array_merge($excludes, array(_xmlsitemap_term_frontpage()));
  $result = db_query(db_rewrite_sql("SELECT t.tid, t.vid, v.module, xt.last_changed, xt.previously_changed, xt.priority_override
    FROM {term_data} t
    LEFT JOIN {vocabulary} v ON t.vid = v.vid
    LEFT JOIN {xmlsitemap_term} xt ON t.tid = xt.tid
    WHERE (t.vid NOT IN (". db_placeholders($excludes, 'int') .") AND xt.priority_override IS NULL OR xt.priority_override >= 0)
    AND t.tid <> %d
    GROUP BY t.tid, t.vid, v.module, xt.last_changed, xt.previously_changed, xt.priority_override", 't', 'tid'), $query_args
  );
  while ($term = db_fetch_object($result)) {
    if ($term->module == 'forum') {
      $path = "forum/$term->tid";
    }
    else {
      $path = taxonomy_term_path($term);
    }
    $alias = drupal_lookup_path('alias', $path);
    if ($alias === FALSE) {
      $alias = NULL;
    }
    $url = xmlsitemap_url($path, $alias, NULL, NULL, TRUE);
    $age = time() - $term->last_changed;
    $interval = empty($term->previously_changed) ? 0 : $term->last_changed - $term->previously_changed;
    db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", $url, $term->last_changed, max($age, $interval), _xmlsitemap_term_priority($term));
  }
}

/**
 * Calculate the priority of a term.
 * @param $term
 *  A term object.
 * @return
 *  A number between 0 and 1, or -1.
 */
function _xmlsitemap_term_priority($term) {
  $priority = $term->priority_override;
  if (!isset($term->priority_override)) {
    $priority = variable_get("xmlsitemap_term_vocabulary_priority_$term->vid", 0.5);
    $priority = min($priority, 1);
  }
  return $priority;
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
