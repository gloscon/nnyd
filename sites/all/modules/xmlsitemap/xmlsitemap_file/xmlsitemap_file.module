<?php
// $Id: xmlsitemap_file.module,v 1.1.4.9 2008/12/18 01:43:38 kiam Exp $

/**
 * @file
 * Adds node file attachments to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_file_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'system_file_system_settings') {
    $form['#submit'][] = 'xmlsitemap_update_sitemap';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_file_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (is_array($node->files)) {
    switch ($op) {
      case 'update':
        foreach ($node->files as $fid => $file) {
          if (!$file['remove'] && $file['list']) {
            $result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_file} WHERE fid = %d AND nid = %d", $fid, $node->nid));
            if ($result !== FALSE) {
              $row = $result;
              if (($changed = filemtime($file['filepath'])) > $row->changed) {
                $row->previously_changed = $row->changed;
                $row->changed = $changed;
              }
            }
            else {
              $row = new stdClass();
              $row->fid = $fid;
              $row->nid = $node->nid;
              $row->changed = filemtime($file['filepath']);
            }
            drupal_write_record('xmlsitemap_file', $row, $result !== FALSE ? 'fid' : NULL);
          }
        }
      case 'insert':
        $row = new stdClass();
        foreach ($node->files as $fid => $file) {
          if (!$file['remove'] && $file['list']) {
            $row->fid = $fid;
            $row->nid = $node->nid;
            $row->changed = filemtime($file['filepath']);
            drupal_write_record('xmlsitemap_file', $row);
          }
        }
        break;
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_file} WHERE nid = %d", $node->nid);
        foreach ($node->files as $file) {
          if ($file['list']) {
            xmlsitemap_update_sitemap();
            break;
          }
        }
        break;
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_file_xmlsitemap_links($type = NULL, $excludes = array()) {
  if ($type == 'node') {
    if (empty($excludes)) {
      $excludes = array('');
    }
    $query_args = array_merge(array(strlen(file_directory_path()) + 2), $excludes, array(_xmlsitemap_file_frontpage()));
    $result = db_query(db_rewrite_sql("SELECT n.nid, n.type, n.promote, f.fid, f.filepath, s.comment_count, xn.priority_override, xf.changed, xf.previously_changed
      FROM {node} n
      INNER JOIN {xmlsitemap_file} xf ON n.nid = xf.nid
      LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid
      LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
      LEFT JOIN {file} f ON f.fid = xf.fid
      WHERE n.status > 0
      AND (n.type NOT IN (". db_placeholders($excludes, 'varchar') .") AND xn.priority_override IS NULL OR xn.priority_override >= 0)
      AND f.filepath <> '%s'
      AND r.list = 1
      GROUP BY n.nid, n.type, n.promote, f.fid, f.filepath, s.comment_count, xn.priority_override, xf.changed, xf.previously_changed"),
      $query_args
    );
    while ($file = db_fetch_object($result)) {
      $access = array();
      if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
        $access = module_invoke_all('file_download', $file->filepath);
      }
      if (!in_array(-1, $access)) {
        $alias = drupal_lookup_path('alias', $file->filepath);
        db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", xmlsitemap_file_create_url($file->filepath, $alias !== FALSE ? $alias : NULL), filemtime($file->filepath), xmlsitemap_file_frequency($file), xmlsitemap_node_priority($file));
      }
    }
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Calculate the change frequency of a file.
 * @param $file
 *  Data for a file retrieved by xmlsitemap_file_xmlsitemap_links().
 * @return
 *  The number of seconds between updates.
 */
function xmlsitemap_file_frequency($file) {
  $age = time() - $file->changed;
  if (empty($file->previously_changed)) {
    return $age;
  }
  return max($age, $file->changed - $file->previously_changed);
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Get path of front page file.
 * @return
 *  The file path if the front page is a file.
 */
function _xmlsitemap_file_frontpage() {
  $frontpage = drupal_get_normal_path(variable_get('site_frontpage', 'node'));
  if (strpos($frontpage, 'system/files') === 0) {
    return file_create_path(substr($frontpage, strlen('system/files')));
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
