<?php
// $Id: xmlsitemap_node.module,v 1.19.2.14 2008/12/19 11:16:15 kiam Exp $

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($comment, $op) {
  $comment = (object) $comment;
  switch ($op) {
    case 'insert':
    case 'update':
    case 'moderate':
    case 'delete':
      db_query("UPDATE {xmlsitemap_node} SET previous_comment = last_comment, last_comment = %d WHERE nid = %d", $comment->timestamp, $comment->nid);
      if (variable_get('xmlsitemap_node_count_comments', TRUE)) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
    $node = $form['#node'];
    if (user_access('override node priority')) {
      $form['xmlsitemap_node'] = array(
        '#type' => 'fieldset',
        '#title' => t('Site map settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 30,
      );
      $options = xmlsitemap_priority_options('both');
      $default = variable_get("xmlsitemap_node_type_priority_$node->type", '0.5');
      $form['xmlsitemap_node']['priority_override'] = array(
        '#type' => 'select',
        '#title' => t('Site map priority'),
        '#default_value' => $node->priority_override,
        '#options' => $options,
        '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
      );
    }
    else {
      $form['priority_override'] = array('#type' => 'value', '#value' => $node->priority_override);
    }
    $form['xmlsitemap_node_status'] = array('#type' => 'value', '#value' => $node->status);
  }
  else {
    switch ($form_id) {
      case 'node_type_form':
        if (isset($form['identity']['type'])) {
          $form['xmlsitemap_node'] = array(
            '#type' => 'fieldset',
            '#title' => t('Site map'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          $form['xmlsitemap_node']['xmlsitemap_node_type_priority'] = array(
            '#type' => 'select',
            '#title' => t('Priority adjustment'),
            '#default_value' => variable_get("xmlsitemap_node_type_priority_{$form['#node_type']->type}", 0.5),
            '#options' => xmlsitemap_priority_options('exclude'),
            '#description' => t('This number will be added to the priority of this content type.'),
          );
          $form['xmlsitemap_old_priority'] = array('#type' => 'value', '#value' => variable_get("xmlsitemap_node_type_priority_{$form['#node_type']->type}", 0.5));
          $form['#submit'][] = 'xmlsitemap_node_type_submit';
        }
        break;
      
      case 'xmlsitemap_settings_sitemap':
        $form['xmlsitemap_node'] = array(
          '#type' => 'fieldset',
          '#title' => t('Content priority'),
          '#description' => t('The settings for the content to include in the site map.'),
          '#collapsible' => TRUE,
        );
        $form['xmlsitemap_node']['xmlsitemap_node_promote_priority'] = array(
          '#type' => 'select',
          '#title' => t('Promotion adjustment'),
          '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
          '#options' => xmlsitemap_priority_options(),
          '#description' => t('This number will be added to the priority of each post that is promoted to the front page.'),
        );
        $form['xmlsitemap_node']['xmlsitemap_node_comment_priority'] = array(
          '#type' => 'select',
          '#title' => t('Comment ratio weight'),
          '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.5),
          '#options' => xmlsitemap_priority_options(),
          '#description' => t('This number will be multiplied by the ratio of the number of comments on a post to the highest number of comments on any postÑthat is, this number will be added to the priority of the post with the most comments.'),
        );
        $form['xmlsitemap_node']['xmlsitemap_node_count_comments'] = array(
          '#type' => 'checkbox',
          '#title' => t('Count comments in change date and frequency'),
          '#default_value' => variable_get('xmlsitemap_node_count_comments', TRUE),
          '#description' => t('If enabled, the frequency of comments on a post will affect its change frequency and last modification date.'),
        );
        $form['buttons']['#weight'] = 1;
        break;
    }
  }
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del("xmlsitemap_node_type_priority_$info->type");
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set("xmlsitemap_node_type_priority_$info->type", variable_get("xmlsitemap_node_type_priority_$info->old_type", 0.5));
    variable_del("xmlsitemap_node_type_priority_$info->old_type");
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'prepare':
      $priority = db_result(db_query("SELECT priority_override FROM {xmlsitemap_node} WHERE nid = %d", $node->nid));
      $node->priority_override = isset($priority) && $priority !== FALSE ? $priority : 'NULL';
      break;
    case 'insert':
      if (!isset($node->priority_override)) {
        $node->priority_override = 'NULL';
      }
      db_query("INSERT INTO {xmlsitemap_node} (nid, last_changed, priority_override) VALUES (%d, %d, %s)", $node->nid, $node->changed, $node->priority_override);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      if (isset($node->priority_override)) {
        $query = "UPDATE {xmlsitemap_node}
          SET previously_changed = last_changed, last_changed = %d, priority_override = %s
          WHERE nid = %d";
        $args = array($node->changed, $node->priority_override, $node->nid);
      }
      else {
        $query = "UPDATE {xmlsitemap_node}
          SET previously_changed = last_changed, last_changed = %d
          WHERE nid = %d";
        $args = array($node->changed, $node->nid);
      }
      db_query($query, $args);
      if ($node->status || $node->xmlsitemap_node_status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_node} WHERE nid = %d", $node->nid);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_node_perm() {
  return array('override node priority');
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links($type = NULL, $excludes = array()) {
  if (!isset($type)) {
    _xmlsitemap_node_links(_xmlsitemap_node_excludes());
    module_invoke_all('xmlsitemap_links', 'node', _xmlsitemap_node_excludes());
  }
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Add submit actions to forms.
 */
function xmlsitemap_node_type_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';
  $priority = $values['xmlsitemap_node_type_priority'];
  $old_priority = $values['xmlsitemap_old_priority'];
  if ($op == t('Save content type') && $priority != $old_priority || $op == t('Reset to defaults') && $old_priority != 0.1) {
    xmlsitemap_update_sitemap();
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Calculate the change frequency of a node.
 * @param $node
 *  Data for a node retrieved by _xmlsitemap_node_links().
 * @return
 *  The number of seconds between updates.
 */
function xmlsitemap_node_frequency($node) {
  $age = time() - $node->changed;
  if (variable_get('xmlsitemap_node_count_comments', TRUE)) {
    $age = time() - max($node->changed, $node->last_comment_timestamp);
    $interval = 0;
    if (!empty($node->previously_changed) && isset($node->previous_comment)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - max($node->previously_changed, $node->previous_comment);
    }
    elseif (!empty($node->previously_changed)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - $node->previously_changed;
    }
    elseif (isset($node->previous_comment)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - $node->previous_comment;
    }
  }
  else {
    $interval = empty($node->previously_changed) ? 0 : $node->changed - $node->previously_changed;
  }
  return max($age, $interval);
}

/**
 * Calculate the priority of a node.
 * @param $node
 *  A node object.
 * @return
 *  A number between 0 and 1, or -1.
 */
function xmlsitemap_node_priority($node) {
  static $maxcomments;
  if (!isset($maxcomments)) {
    $maxcomments = 0;
    if (module_exists('comment')) {
      $maxcomments = db_result(db_query("SELECT MAX(comment_count) FROM {node_comment_statistics}"));
    }
  }
  $priority = $node->priority_override;
  if (!isset($node->priority_override)) {
    $priority = 0;
    $priority += variable_get("xmlsitemap_node_type_priority_$node->type", 0.5);
    if ($node->promote) {
      $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
    }
    if (!empty($maxcomments)) {
      $priority += $node->comment_count / $maxcomments * variable_get('xmlsitemap_node_comment_priority', 0.5);
    }
    $priority = round($priority, 1);
    $priority = min($priority, 1);
  }
  return $priority;
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Get array of excluded types.
 * @return
 *  An array of node types to exclude.
 */
function _xmlsitemap_node_excludes() {
  static $excludes;
  if (!isset($excludes)) {
    $excludes = array();
    foreach (node_get_types() as $type => $name) {
      if (variable_get("xmlsitemap_node_type_priority_$type", 0.5) < 0) {
        $excludes[] = $type;
      }
    }
  }
  return $excludes;
}

/**
 * Get the nid of the front page node.
 * @return
 *  The front page node ID, or 0 if front page is not a node.
 */
function _xmlsitemap_node_frontpage() {
  $nid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 2 && $frontpage[0] == 'node' && is_numeric($frontpage[1])) {
    $nid = $frontpage[1];
  }
  return $nid;
}

/**
 * Get node links.
 * @param $excludes
 *  An array of node types to exclude.
 * @return
 *  An array of links. Each link is an array containing the XML values for a
 *  site map URL.
 */
function _xmlsitemap_node_links($excludes = array()) {
  if (empty($excludes)) {
    $excludes = array('');
  }
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $coalesce = 'COALESCE';
      $cast = 'CHAR';
      break;
    case 'pgsql':
      $coalesce = 'FIRST';
      $cast = 'VARCHAR';
      break;
  }
  $columns = 'n.nid, n.type, n.promote, n.changed, xn.previously_changed, xn.priority_override';
  $query = "SELECT $columns, $coalesce(ua.dst) AS alias FROM {node} n";
  if (module_exists('comment')) {
    $columns .= ', s.comment_count, s.last_comment_timestamp, xn.previous_comment';
    $query .= " LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid";
  }
  $query .= " LEFT JOIN {url_alias} ua ON ua.src = CONCAT('node/', CAST(n.nid AS $cast)) LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid WHERE n.status > 0 AND (n.type NOT IN (". db_placeholders($excludes, 'varchar') .") AND xn.priority_override IS NULL OR xn.priority_override >= 0) AND n.nid <> %d GROUP BY $columns";
  $result = db_query(db_rewrite_sql($query), array_merge($excludes, array(_xmlsitemap_node_frontpage())));
  while ($node = db_fetch_object($result)) {
    db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", xmlsitemap_url('node/'. $node->nid, $node->alias, NULL, NULL, TRUE), variable_get('xmlsitemap_node_count_comments', TRUE) ? max($node->changed, $node->last_comment_timestamp) : $node->changed, xmlsitemap_node_frequency($node), xmlsitemap_node_priority($node));
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
